<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>산책메이트</title>
    <!-- favicon -->
    <link rel="icon" href="../images/HotDog-Logo.png" type="image/x-icon" sizes="32x32">
    <!-- socket.io -->
    <script src="socket.io/socket.io.js"></script>
    <!-- axios -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- bootstrap icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <!-- css -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link rel="stylesheet" href="../css/mate.css">
    <title>Document</title>
</head>

<body>
    <header>
        
    </header>

    <!-- -------------------------산책 메이트 찾기--------------------------- -->
    <main>





        <div id="wrapper">
            <section id="find-mate-section">
                <div id="find-mate-wrapper">
                    <p>동네에 있는 산책 메이트를 찾아보세요!</p>
                    <div id="find-mate-fieldset-container">
                        <fieldset class="field">
                            <legend>견종 크기</legend>
                            <form name="form-type">
                                <input type="radio" name="type" value="small" id="small" />
                                <label for="small">소형견</label>
                                <input type="radio" name="type" value="medium" id="medium" />
                                <label for="medium">중형견</label>
                                <input type="radio" name="type" value="large" id="large" />
                                <label for="large">대형견</label>
                            </form>
                        </fieldset>
                        <fieldset class="field">
                            <legend>견종 성격</legend>
                            <form name="form-character">
                                <input type="radio" name="character" value="introvert" id="introvert" />
                                <label for="introvert">소심</label>
                                <input type="radio" name="character" value="extrovert" id="extrovert" />
                                <label for="extrovert">활발</label>
                            </form>
                        </fieldset>
                        <fieldset class="field">
                            <legend>산책 시간</legend>
                            <form name="form-walkingTime">
                                <input type="radio" name="walkingTime" value="60" id="60" />
                                <label for="60">60min <i class="bi bi-arrow-down"></i></label>
                                <input type="radio" name="walkingTime" value="90" id="90" />
                                <label for="90">90min</label>
                                <input type="radio" name="walkingTime" value="120" id="120" />
                                <label for="120">120min <i class="bi bi-arrow-up"></i></label>
                            </form>
                        </fieldset>
                        <fieldset class="field">
                            <legend>산책 장소</legend>
                            <form name="form-walkingLocation">
                                <input type="radio" name="walkingLocation" value="indoor" id="indoor" />
                                <label for="indoor">실내</label>
                                <input type="radio" name="walkingLocation" value="outdoor" id="outdoor" />
                                <label for="outdoor">실외</label>
                            </form>
                        </fieldset>
                    </div>

                    <div id="find-mate-search-container">
                        <div id="search-btn-container">
                            <button type="button" onclick="search()" id="search-btn">찾기</button>
                        </div>
                        <div id="onsearch-btn-container" hidden>
                            <p>동일한 조건의 산책메이트를 찾는중입니다.</p>
                            <div class="loader"></div>
                            <button type="button" onclick="cancelSearch()" id="cancelSearch">찾기 취소</button>
                        </div>
                    </div>
                </div>
            </section>
            <!-- -------------------------산책 메이트 조회 리스트 --------------------------- -->
            <section id="found-mate-section">
                <div id="found-mate-wrapper">
                    <p>사용자들</p>
                    <ul id="mate-list">
                    </ul>
                </div>
            </section>
        </div>
    </main>

    <!-- -------------------------------------------------------------------------- -->
    <div id="chatting-wrapper" onclick="toggleChatList()">
        <i class="bi bi-chat-right-text" id="chatbox-icon"></i>
    </div>

    <div id="chat-list-wrapper">
        <p>대화목록</p>
        <ul id="chat-list">
        </ul>
    </div>

    <div id="chat-room-wrapper" style="display:none;"></div>
    <!-- -------------------------------------------------------------------------- -->

    <footer>
    </footer>

</body>

<!-- ========================================================================================== -->
<!-- ========================================================================================== -->

<!-- ========================================================================================== -->

<!-- ========================================================================================== -->

<!-- ========================================================================================== -->

<!-- ========================================================================================== -->

<!-- ========================================================================================== -->

<script>
    //아이디 담길 변수 선언
    let myID;
    let otherID;

    //소켓 연결
    const socket = io()
    // token 유효성 검사
    (async function () {
        //로컬 스토리지에서 'token' 이름의 아이템 불러오기
        const token = window.localStorage.getItem('token')

        const res = await axios({
            method: 'post',
            url: '/mate/verify',
            data: {
                token
            }
        })
        if (res.data.result) {
            myID = res.data.userinfo.userid
            myLocation = res.data.userinfo.address
            console.log('myUserInfo', res.data.userinfo)
            socket.emit('getChatList', myID)
        } else {
            alert('로그인 해주세요')
            document.location.href='/'
        }
    })()

    function signup() {
        window.location.href = "/signup";
    }


    //산책페이트 찾기 필터 요소, 찾기 버튼 요소, 찾는 중 안내 요소
    const findMateForm = document.querySelector('#find-mate-wrapper')
    const searchBtn = document.querySelector('#search-btn-container')
    const onSearch = document.querySelector('#onsearch-btn-container')

    //아이디 입력 요소
    const id = document.querySelector('#userid')

    //찾기 조건 담길 변수 선언
    let filter;
    let myLocation;


    // 대화목록 보여주기
    function showChatList(chatList) {
        // chatList => [ {roomid:'', users:['userid','userid'] }, ... ]

        const ul = document.querySelector('#chat-list')
        ul.innerHTML = ''

        chatList.forEach((room) => {
            let otherUser;
            room.users.forEach((user) => {
                if (user != myID) {
                    otherUser = user
                }
            })
            console.log('otherUser ====', otherUser)
            if (otherUser == undefined) {
                otherUser = 'unknown'
            }
            const li = document.createElement('li')
            const span = document.createElement('span')
            const btnsContainer = document.createElement('span')
            btnsContainer.classList.add('chat-list-btn-container')
            span.textContent = `${otherUser}님`

            const enterChatBtn = document.createElement('button')
            enterChatBtn.setAttribute('type', 'button')
            enterChatBtn.setAttribute('onclick', `enterChat('${room.roomid}','${otherUser}')`)
            enterChatBtn.innerHTML = `<i class="bi bi-box-arrow-in-right"></i>`

            const leaveChatBtn = document.createElement('button')
            leaveChatBtn.setAttribute('type', 'button')
            leaveChatBtn.setAttribute('onclick', `leaveChat('${room.roomid}','${otherUser}')`)
            leaveChatBtn.innerHTML = `<i class="bi bi-x-lg"></i>`

            li.id = `${room.roomid}`
            btnsContainer.appendChild(enterChatBtn)
            btnsContainer.appendChild(leaveChatBtn)
            li.appendChild(span)
            li.appendChild(btnsContainer)
            ul.appendChild(li)
        })
    }

    // HTML 채팅방 만드는 함수
    function createChatRoom(otherID, roomID, messages) {
        const chatWrapper = document.querySelector('#chat-room-wrapper')
        chatWrapper.innerHTML = ''

        const topBarInterface = document.createElement('div')
        topBarInterface.classList.add('top-bar-interface')

        const span = document.createElement('span')
        span.textContent = `${otherID}님과의 대화방`

        const exitChatroomBtn = document.createElement('button')
        exitChatroomBtn.classList.add('exit-chat-room-btn')
        const exitRoomIcon = `<i class="bi bi-box-arrow-left exit-chat-room-btn-icon"></i>`
        exitChatroomBtn.innerHTML = exitRoomIcon
        exitChatroomBtn.onclick = function () {
            chatWrapper.innerHTML = ''
            chatWrapper.style.display = 'none'
        }

        topBarInterface.appendChild(exitChatroomBtn)
        topBarInterface.appendChild(span)
        // topBarInterface

        const chatInterface = document.createElement('div')
        chatInterface.classList.add('chat-interface')
        chatInterface.id = `${roomID}`
        // chatInterface

        const inputInterface = document.createElement('div')
        inputInterface.classList.add('input-interface')
        const messageInputContainer = document.createElement('div')
        messageInputContainer.classList.add('message-input-container')
        const textarea = document.createElement('textarea')
        textarea.name = 'message-input'
        textarea.id = 'message-input'
        messageInputContainer.appendChild(textarea)

        const sendButtonContainer = document.createElement('div')
        sendButtonContainer.classList.add('send-button-container')
        const sendButton = document.createElement('button')
        sendButton.id = 'sendMessage'
        sendButton.setAttribute('onclick', `sendMessage('${otherID}','${roomID}')`)
        sendButton.innerHTML = `<i class="bi bi-send-fill fa-sm"></i>`
        sendButtonContainer.appendChild(sendButton)

        inputInterface.appendChild(messageInputContainer)
        inputInterface.appendChild(sendButtonContainer)
        // inputInterface

        chatWrapper.appendChild(topBarInterface)
        chatWrapper.appendChild(chatInterface)
        chatWrapper.appendChild(inputInterface)

        if (messages.length == 0) {
            return;
        }

        messages.forEach((msginfo) => {
            const { id, senderid, content } = msginfo
            appendChatMessage(senderid, id, content)
        })
    }

    //대화방 입장 onclick
    function enterChat(roomID, otherID) {
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID
        }
        socket.emit('fetchChatRoomData', data)
    }

    //clientList를 받아서 보여준 특정 클라이언트 li태그 onclick
    function chat(otherID, otherSocketID) {
        const data = {
            myID: myID,
            otherID: otherID,
            otherSocketID: otherSocketID,
        }
        socket.emit('startChat', data)
    }

    //대화방 입장시
    socket.on('openChatRoom', (chatRoomInfo) => {
        const { myID, otherID, roomID, messages } = chatRoomInfo
        console.log('messages', messages)
        // messages => [{id, content. senderid, createdAt},...]
        // <div id="chat-room-wrapper" style="display:none;"></div>
        document.getElementById('chat-room-wrapper').style.display = 'flex'
        createChatRoom(otherID, roomID, messages)
    })

    function sendMessage(otherID, roomID) {
        const content = document.querySelector('#message-input').value
        const chatInterface = document.querySelector('.chat-interface')
        chatInterface.scrollTop = chatInterface.scrollHeight;
        const data = {
            myID,
            otherID,
            roomID,
            content
        }
        socket.emit('message', data)
    }

    socket.on('newMessage', (msgData) => {
        const { senderID, receiverID, roomID, message } = msgData

        if (myID != senderID) {
            socket.emit('getChatList', myID)
            appendNotification(roomID, message)
            if (document.querySelector('#chat-room-wrapper')) {
                appendChatMessage(senderID, roomID, message)
            }
        } else {
            appendChatMessage(myID, roomID, message)
        }
    })

    function appendChatMessage(senderID, roomID, message) {
        const chatInterface = document.querySelector('.chat-interface')
        const chatBubbleContainer = document.createElement('div')
        chatBubbleContainer.classList.add('chat')
        if (myID == senderID) {
            chatBubbleContainer.classList.add('me')
        } else {
            chatBubbleContainer.classList.add('other')
        }
        const chat = document.createElement('div')
        chat.classList.add('textbox')
        chat.textContent = message
        chatBubbleContainer.appendChild(chat)
        chatInterface.appendChild(chatBubbleContainer)
        chatInterface.scrollTop = chatInterface.scrollHeight;
    }

    function appendNotification(roomID, message) {
        console.log('newMessage to you')
    }

    //clientList중 하나를 클릭하고 나와 다른 사용자의 고유한 roomid를 새로 할당받는다
    socket.on('openNewChatRoom', (roomInfo) => {
        const { roomID, otherID, myID } = roomInfo
        console.log('newChatRoom ||', roomID)
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID
        }
        socket.emit('getChatList', myID)
        socket.emit('fetchChatRoomData', data)
    })

    //clientList중 하나를 클릭 =
    socket.on('openExistingChatRoom', (roomInfo) => {
        const { roomID, otherID, myID } = roomInfo
        console.log('existingChatRoom ||', roomID)
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID
        }
        socket.emit('fetchChatRoomData', data)
    })


    //chatList(대화방 목록) 받는 이벤트
    socket.on('chatList', (chatList) => {
        console.log('chatList', chatList)
        showChatList(chatList)
    })

    //대화방 나가기 onclick
    async function leaveChat(roomID, otherID) {
        console.log('leaveChat()')
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID
        }
        await socket.emit('leaveChat', data)
    }

    socket.on('leftChat', (msg) => {
        console.log(msg)

        socket.emit('getChatList', myID)
    })

    //필터조건으로 찾기 버튼 onclick 
    function search() {
        if (!myID) {
            alert('아이디를 입력해주세요')
        } else {
            const type = document.forms['form-type']
            const character = document.forms['form-character']
            const walkingTime = document.forms['form-walkingTime']
            const walkingLocation = document.forms['form-walkingLocation']

            filter = `${myLocation}${type.type.value}_${character.character.value}_${walkingTime.walkingTime.value}_${walkingLocation.walkingLocation.value}`

            const data = {
                userid: myID,
                filter: filter
            }

            socket.emit('joinRoom', data)

            findMateForm.hidden = false;
            searchBtn.hidden = true;
            onSearch.hidden = false;
        }
    }

    //필터조건으로 찾기 중지 버튼 onclick 
    function cancelSearch() {
        const data = {
            myID: myID,
            filter: filter
        }
        socket.emit('leaveRoom', data)
        const ul = document.querySelector('#mate-list')
        ul.innerHTML = ''

        findMateForm.hidden = false;
        searchBtn.hidden = false;
        onSearch.hidden = true;
    }

    //clientList 받는 이벤트
    socket.on('clientList', (clientList) => {
        console.log('clientList', clientList)
        updateUsers(clientList)
    })

    // HTML 동일조건 사용자들 보여주는 함수
    function updateUsers(clientList) {
        const ul = document.querySelector('#mate-list')
        ul.innerHTML = ''
        clientList.forEach((user) => {
            if (user.userid === myID) {
                return;
            } else {
                const li = document.createElement('li')
                li.setAttribute('onclick', `chat('${user.userid}','${user.socketid}')`)
                const icon = `<i class="bi bi-chat-text-fill"></i>`
                li.innerHTML = `${icon}  ${user.userid}님`
                ul.appendChild(li)
            }
        })
    }

    function toggleChatList() {
        const chatListWrapper = document.querySelector('#chat-list-wrapper')
        const chatRoomWrapper = document.querySelector('#chat-room-wrapper')
        switch (chatListWrapper.style.display || chatRoomWrapper.style.display) {
            case 'flex':
                chatListWrapper.style.display = 'none';
                chatRoomWrapper.style.display = 'none'
                break;

            default:
                chatListWrapper.style.display = 'flex';
                break;
        }
    }

</script>

</html>