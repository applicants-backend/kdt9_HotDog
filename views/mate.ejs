<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>

    </style>
    <title>Document</title>
</head>

<body>
    <h1>산책 메이트 찾기 페이지</h1>
    <h4>내정보</h4>
    <input type="text" id="myID" placeholder="내 ID는?" />
    <button type="button" onclick="submitID()">아이디 입력</button>
    <input type="text" id="userid" placeholder="아이디">
    <button type="button" onclick="inputID()">아이디 입력</button>
    <br />
    <br />
    <div>내 아이디:
        <div id="myInfo"></div>
    </div>
    <div id="mateList-wrapper">
        <p>=============조회되는 사람들================</p>
        <ul id="mateList"></ul>
    </div>
    <div id="findMate">
        <p>산책메이트 찾기</p>
        <fieldset>
            <legend>견종 크기</legend>
            <form name="form-type">
                <input type="radio" name="type" value="small" id="small" />
                <label for="small">소형</label>
                <input type="radio" name="type" value="medium" id="medium" />
                <label for="medium">중형</label>
                <input type="radio" name="type" value="large" id="large" />
                <label for="large">대형</label>
            </form>
        </fieldset>
        <fieldset>
            <legend>견종 성격</legend>
            <form name="form-character">
                <input type="radio" name="character" value="introvert" id="introvert" />
                <label for="introvert">소심</label>
                <input type="radio" name="character" value="extrovert" id="extrovert" />
                <label for="extrovert">활발</label>
            </form>
        </fieldset>
        <fieldset>
            <legend>희망 산책 시간</legend>
            <form name="form-walkingTime">
                <input type="radio" name="walkingTime" value="60" id="60" />
                <label for="60">60분 이하</label>
                <input type="radio" name="walkingTime" value="90" id="90" />
                <label for="90">90분 정도</label>
                <input type="radio" name="walkingTime" value="120" id="120" />
                <label for="120">120분 이상</label>
            </form>
        </fieldset>
        <fieldset>
            <legend>희망 산책 장소</legend>
            <form name="form-walkingLocation">
                <input type="radio" name="walkingLocation" value="indoor" id="indoor" />
                <label for="indoor">실내</label>
                <input type="radio" name="walkingLocation" value="outdoor" id="outdoor" />
                <label for="outdoor">실외</label>
            </form>
        </fieldset>
        <button type="button" onclick="search()" id="search">찾기</button>
    </div>
    <div id="onSearch" hidden>
        <p>동일한 조건의 산책메이트를 찾는중입니다.</p>
        <button type="button" onclick="cancelSearch()" id="cancelSearch">찾기 취소</button>
    </div>
    <button type="button" onclick="test()">현재 방 인원 확인</button>
    <div id="chat-list-wrapper">
        <p>=============대화목록===========</p>
        <ul id="chat-list">
        </ul>
    </div>
    <div id="chat-wrapper"></div>
</body>
<script>
    //로컬 스토리지에서 'token' 이름의 아이템 불러오기
    const token = window.localStorage.getItem('token')

    //아이디 담길 변수 선언
    let myID;
    let otherID;

    //소켓 연결
    const socket = io()

    //산책페이트 찾기 필터 요소
    const findMateForm = document.querySelector('#findMate')

    //아이디 입력 요소
    const id = document.querySelector('#userid')

    //찾기 조건 담길 변수 선언
    let filter;

    const searchBtn = document.querySelector('#search')
    const onSearch = document.querySelector('#onSearch')
    const ul = document.querySelector('#mateList')

    // token 유효성 검사
    async function submitID() {
        const node = document.querySelector('#myID')
        const token = window.localStorage.getItem(`${node.value}`);
        const res = await axios({
            method: 'post',
            url: '/mate/verify',
            data: {
                token
            }
        })
        if (res.data.result) {
            myID = res.data.userinfo.userid
            console.log('myUserInfo', res.data.userinfo)
            showMyID(myID)
        } else {
            alert('로그인 해주세요')
            document.location.href = '/'
        }
    }

    // 대화목록 보여주기
    function showChatList(userArray) {
        userArray.forEach((user) => {
            const ul = document.querySelector('#chat-list')
            const li = document.createElement('li')
            li.textContent = user.userid
            ul.appendChild(li)
        })
    }

    // HTML 채팅방 만들기
    function createChatRoom() {
        const chatWrapper = document.querySelector('#chat-wrapper')
        const chat = document.createElement('div')

        const chatScreen = document.createElement('div')
        const inputContainer = document.createElement('div')
        const input = document.createElement('input')
        const btn = document.createElement('button')
        btn.textContent = '전송'

        inputContainer.appendChild(input)
        inputContainer.appendChild(btn)

        chat.appendChild(chatScreen)
        chat.appendChild(inputContainer)

        chatWrapper.appendChild(chat)
    }

    function updateUsers(array) {
        ul.innerHTML = ''
        array.forEach((user) => {
            if (user.userid === myID) {
                return;
            } else {
                const li = document.createElement('li')
                li.setAttribute('onclick', `chat('${user.userid}','${user.socketid}')`)
                li.textContent = `${user.userid} / ${user.socketid}`
                ul.appendChild(li)
            }
        })
    }

    function showMyID(id) {
        const div = document.querySelector('#myInfo')
        div.innerHTML = ''
        const p = document.createElement('p')
        p.textContent = id
        div.appendChild(p)
    }

    socket.on('usersInRoom', (clientList) => {
        console.log('usersInRoom', clientList)
        updateUsers(clientList)
    })

    socket.on('newChat', (inviterID, myID, privateRoomName) => {
        alert(`${inviterID}님이 ${myID}님을 대화에 초대했습니다. 대화방=${privateRoomName}`)
        createChatRoom()
    })

    function inputID() {
        myID = id.value
        showMyID(myID)
        id.value = ''
    }

    function search() {
        console.log(myID)
        if (!myID) {
            alert('아이디를 입력해주세요')
        } else {
            const type = document.forms['form-type']
            const character = document.forms['form-character']
            const walkingTime = document.forms['form-walkingTime']
            const walkingLocation = document.forms['form-walkingLocation']

            filter = `${type.type.value}_${character.character.value}_${walkingTime.walkingTime.value}_${walkingLocation.walkingLocation.value}`

            const data = {
                userid: myID,
                roomName: filter
            }

            socket.emit('joinRoom', data)

            findMateForm.hidden = true;
            searchBtn.hidden = true;
            onSearch.hidden = false;
        }
    }

    function cancelSearch() {
        socket.emit('leaveRoom', myID, filter)
        ul.innerHTML = ''

        findMateForm.hidden = false;
        searchBtn.hidden = false;
        onSearch.hidden = true;
    }

    function test() {
        socket.emit('test')
    }

    function chat(id, socketid) {
        const data = {
            myID: myID,
            otherID: id,
            otherSocketID: socketid
        }
        socket.emit('createChat', data)
        createChatRoom()
    }

</script>

</html>