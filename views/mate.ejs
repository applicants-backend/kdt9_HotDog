<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>

    </style>
    <link rel="icon" href="../images/HotDog-Logo.png" type="image/x-icon" sizes="32x32">
    <title>Document</title>
</head>

<body>
    <h1>산책 메이트 찾기 페이지</h1>
    <h4>내정보</h4>

    <!-- ----------------------임의로 아이디 입력-------------------------- -->

    <input type="text" id="myID" placeholder="내 ID는?" />
    <button type="button" onclick="submitID()">아이디 입력</button>
    <div>내 아이디:
        <div id="myInfo"></div>
    </div>
    <hr />

    <!-- -------------------------내 대화 목록--------------------------- -->
    <div id="chat-list-wrapper" style="background-color: blanchedalmond;">
        <p>=============대화목록===========</p>
        <ul id="chat-list">
        </ul>
    </div>
    <div id="chat-wrapper"></div>
    <hr />

    <!-- -------------------------산책 메이트 조회 리스트 --------------------------- -->
    <div id="mateList-wrapper" style="background-color: beige; height: 200px;">
        <p>=============조회되는 사람들================</p>
        <ul id="mateList"></ul>
    </div>
    <hr />

    <!-- -------------------------산책 메이트 찾기--------------------------- -->
    <div id="findMate">
        <p>산책메이트 찾기</p>
        <fieldset>
            <legend>견종 크기</legend>
            <form name="form-type">
                <input type="radio" name="type" value="small" id="small" />
                <label for="small">소형</label>
                <input type="radio" name="type" value="medium" id="medium" />
                <label for="medium">중형</label>
                <input type="radio" name="type" value="large" id="large" />
                <label for="large">대형</label>
            </form>
        </fieldset>
        <fieldset>
            <legend>견종 성격</legend>
            <form name="form-character">
                <input type="radio" name="character" value="introvert" id="introvert" />
                <label for="introvert">소심</label>
                <input type="radio" name="character" value="extrovert" id="extrovert" />
                <label for="extrovert">활발</label>
            </form>
        </fieldset>
        <fieldset>
            <legend>희망 산책 시간</legend>
            <form name="form-walkingTime">
                <input type="radio" name="walkingTime" value="60" id="60" />
                <label for="60">60분 이하</label>
                <input type="radio" name="walkingTime" value="90" id="90" />
                <label for="90">90분 정도</label>
                <input type="radio" name="walkingTime" value="120" id="120" />
                <label for="120">120분 이상</label>
            </form>
        </fieldset>
        <fieldset>
            <legend>희망 산책 장소</legend>
            <form name="form-walkingLocation">
                <input type="radio" name="walkingLocation" value="indoor" id="indoor" />
                <label for="indoor">실내</label>
                <input type="radio" name="walkingLocation" value="outdoor" id="outdoor" />
                <label for="outdoor">실외</label>
            </form>
        </fieldset>
        <button type="button" onclick="search()" id="search">찾기</button>
    </div>
    <div id="onSearch" hidden>
        <p>동일한 조건의 산책메이트를 찾는중입니다.</p>
        <button type="button" onclick="cancelSearch()" id="cancelSearch">찾기 취소</button>
    </div>
</body>
<script>
    //로컬 스토리지에서 'token' 이름의 아이템 불러오기
    const token = window.localStorage.getItem('token')

    //아이디 담길 변수 선언
    let myID;
    let otherID;

    //소켓 연결
    const socket = io()

    //산책페이트 찾기 필터 요소, 찾기 버튼 요소, 찾는 중 안내 요소
    const findMateForm = document.querySelector('#findMate')
    const searchBtn = document.querySelector('#search')
    const onSearch = document.querySelector('#onSearch')

    //아이디 입력 요소
    const id = document.querySelector('#userid')

    //찾기 조건 담길 변수 선언
    let filter;

    // token 유효성 검사
    async function submitID() {
        const node = document.querySelector('#myID')
        const token = window.localStorage.getItem(`${node.value}`);
        const res = await axios({
            method: 'post',
            url: '/mate/verify',
            data: {
                token
            }
        })
        if (res.data.result) {
            myID = res.data.userinfo.userid
            console.log('myUserInfo', res.data.userinfo)
            showMyID(myID)
            socket.emit('getChatList', myID)
        } else {
            alert('로그인 해주세요')
            document.location.href = '/'
        }
    }

    // 대화목록 보여주기
    function showChatList(chatList) {
        // chatList => [ {roomid:'', users:['userid','userid'] }, ... ]

        const ul = document.querySelector('#chat-list')
        ul.innerHTML = ''

        chatList.forEach((room) => {
            let otherUser;
            room.users.forEach((user) => {
                if (user != myID) {
                    otherUser = user
                }
            })
            console.log('otherUser ====', otherUser)
            if(otherUser == undefined) {
                otherUser = 'unknown'
            }
            const li = document.createElement('li')
            const span = document.createElement('span')
            span.textContent = otherUser
            const enterChatBtn = document.createElement('button')
            enterChatBtn.textContent = '대화방 참가'
            enterChatBtn.setAttribute('type', 'button')
            enterChatBtn.setAttribute('onclick', `enterChat('${room.roomid}','${otherUser}')`)

            const leaveChatBtn = document.createElement('button')
            leaveChatBtn.textContent = '대화방 나가기'
            leaveChatBtn.setAttribute('type', 'button')
            leaveChatBtn.setAttribute('onclick', `leaveChat('${room.roomid}','${otherUser}')`)
            li.id = `${room.roomid}`
            li.appendChild(span)
            li.appendChild(enterChatBtn)
            li.appendChild(leaveChatBtn)
            ul.appendChild(li)
        })
    }

    // HTML 채팅방 만드는 함수
    function createChatRoom(otherID, roomID, messages) {
        const chatWrapper = document.querySelector('#chat-wrapper')
        chatWrapper.innerHTML = ''
        const notice = document.createElement('div')
        notice.textContent = `${myID}와 ${otherID}의 대화방`

        const chat = document.createElement('div')
        chat.id = `${roomID}`
        chat.classList.add('chatInterface')
        const chatScreen = document.createElement('div')
        chatScreen.id = 'chatScreen'
        chatScreen.style.backgroundColor = 'skyblue'
        chatScreen.style.height = '300px'
        const inputContainer = document.createElement('div')
        const input = document.createElement('input')
        input.id = 'messageInput'
        const btn = document.createElement('button')
        btn.textContent = '전송'
        btn.id = 'sendMessage'
        btn.setAttribute('onclick', `sendMessage('${otherID}','${roomID}')`)

        const leaveBtn =  document.createElement('button')
        leaveBtn.textContent = '뒤로가기'
        leaveBtn.onclick = function () {
            chatWrapper.innerHTML = ''
        }


        inputContainer.appendChild(input)
        inputContainer.appendChild(btn)
        inputContainer.appendChild(leaveBtn)

        chat.appendChild(chatScreen)
        chat.appendChild(inputContainer)

        chatWrapper.appendChild(notice)
        chatWrapper.appendChild(chat)

        if (messages.length == 0) {
            return;
        }

        messages.forEach((msginfo) => {
            const {id, senderid, content} = msginfo
            appendChatMessage(senderid, id, content)
        })
    }

    //대화방 입장 onclick
    function enterChat(roomID, otherID) {
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID
        }
        socket.emit('fetchChatRoomData', data)
    }

    //clientList를 받아서 보여준 특정 클라이언트 li태그 onclick
    function chat(otherID, otherSocketID) {
        const data = {
            myID: myID,
            otherID: otherID,
            otherSocketID: otherSocketID,
        }
        socket.emit('startChat', data)
    }

    //대화방 입장시
    socket.on('openChatRoom', (chatRoomInfo) => {
        const { myID, otherID, roomID, messages } = chatRoomInfo
        console.log('messages', messages)
        // messages => [{id, content. senderid, createdAt},...]
        createChatRoom(otherID, roomID, messages)
    })

    function sendMessage(otherID, roomID) {
        const content = document.querySelector('#messageInput').value
        const data = {
            myID,
            otherID,
            roomID,
            content
        }
        socket.emit('message', data)
    }

    socket.on('newMessage', (msgData) => {
        const { senderID, receiverID, roomID, message } = msgData
        const chatWrapper = document.querySelector('#chat-wrapper')
        const chatInterface = document.querySelector('.chatInterface')

        if (myID != senderID) {
            socket.emit('getChatList', myID)
            appendNotification(roomID, message)
            if(document.querySelector('#chatScreen')) {
                appendChatMessage(senderID, roomID, message)
            }
        } else {
            appendChatMessage(myID, roomID, message)
        }
    })

    function appendChatMessage(senderID, roomID, message) {
        chatScreen = document.querySelector('#chatScreen')
        chatBubbleContainer = document.createElement('div')
        chatBubbleContainer.style.textAlign = myID == senderID ? 'right' : 'left'
        chatBubbleMessage = document.createElement('span')
        chatBubbleMessage.textContent = message
        chatBubbleContainer.appendChild(chatBubbleMessage)
        chatScreen.appendChild(chatBubbleContainer)
    }

    function appendNotification(roomID, message) {
        console.log('newMessage to you')
    }

    //clientList중 하나를 클릭하고 나와 다른 사용자의 고유한 roomid를 새로 할당받는다
    socket.on('openNewChatRoom', (roomInfo) => {
        const { roomID, otherID, myID } = roomInfo
        console.log('newChatRoom ||', roomID)
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID
        }
        socket.emit('getChatList', myID)
        socket.emit('fetchChatRoomData', data)
    })

    //clientList중 하나를 클릭 =
    socket.on('openExistingChatRoom', (roomInfo) => {
        const { roomID, otherID, myID } = roomInfo
        console.log('existingChatRoom ||', roomID)
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID
        }
        socket.emit('fetchChatRoomData', data)
    })


    //chatList(대화방 목록) 받는 이벤트
    socket.on('chatList', (chatList) => {
        console.log('chatList', chatList)
        showChatList(chatList)
    })

    //대화방 나가기 onclick
    async function leaveChat(roomID, otherID) {
        console.log('leaveChat()')
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID
        }
        await socket.emit('leaveChat', data)
    }

    socket.on('leftChat', (msg) => {
        console.log(msg)

        socket.emit('getChatList', myID)
    })

    //필터조건으로 찾기 버튼 onclick 
    function search() {
        if (!myID) {
            alert('아이디를 입력해주세요')
        } else {
            const type = document.forms['form-type']
            const character = document.forms['form-character']
            const walkingTime = document.forms['form-walkingTime']
            const walkingLocation = document.forms['form-walkingLocation']

            filter = `${type.type.value}_${character.character.value}_${walkingTime.walkingTime.value}_${walkingLocation.walkingLocation.value}`

            const data = {
                userid: myID,
                filter: filter
            }

            socket.emit('joinRoom', data)

            findMateForm.hidden = true;
            searchBtn.hidden = true;
            onSearch.hidden = false;
        }
    }

    //필터조건으로 찾기 중지 버튼 onclick 
    function cancelSearch() {
        const data = {
            myID: myID,
            filter: filter
        }
        socket.emit('leaveRoom', data)
        const ul = document.querySelector('#mateList')
        ul.innerHTML = ''

        findMateForm.hidden = false;
        searchBtn.hidden = false;
        onSearch.hidden = true;
    }

    //clientList 받는 이벤트
    socket.on('clientList', (clientList) => {
        console.log('clientList', clientList)
        updateUsers(clientList)
    })

    // HTML 동일조건 사용자들 보여주는 함수
    function updateUsers(clientList) {
        const ul = document.querySelector('#mateList')
        ul.innerHTML = ''
        clientList.forEach((user) => {
            if (user.userid === myID) {
                return;
            } else {
                const li = document.createElement('li')
                li.setAttribute('onclick', `chat('${user.userid}','${user.socketid}')`)
                li.textContent = `${user.userid}님과 대화하기`
                ul.appendChild(li)
            }
        })
    }

    // 배포시 삭제: 내 아이디 보여주는 함수
    function showMyID(id) {
        const div = document.querySelector('#myInfo')
        div.innerHTML = ''
        const p = document.createElement('p')
        p.textContent = id
        div.appendChild(p)
    }

    function inputID() {
        myID = id.value
        showMyID(myID)
        id.value = ''
    }

</script>

</html>